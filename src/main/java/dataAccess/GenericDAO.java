package dataAccess;

import java.beans.IntrospectionException;
import java.beans.PropertyDescriptor;
import java.lang.reflect.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import connection.ConnectionFactory;
import model.Product;


public class GenericDAO<T> {
    protected static final Logger LOGGER = Logger.getLogger(GenericDAO.class.getName());
    private final Class<T> type;

    @SuppressWarnings("unchecked")
    public GenericDAO() {
        this.type = (Class<T>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0];
    }

    /**
     * Searches for an entry in the database based on the key parameter
     * @return: object found of type T.
     */
    public T find(Object key) {
        Connection dbConnection = ConnectionFactory.getConnection();
        T toReturn = null;
        PreparedStatement findStatement = null;
        String findQuery = null;
        if(key.getClass().getSimpleName().equals("Integer")) {
            findQuery = findQuery("ID");
        }
        else if(key.getClass().getSimpleName().equals("String")) {
            findQuery = findQuery("email");
        } else {
            return null;
        }

        ResultSet resultSet = null;
        try {
            findStatement = dbConnection.prepareStatement(findQuery);

            if((key.getClass().getSimpleName()).equals("Integer")) {
                findStatement.setInt(1, (Integer) key);
            }
            else {
                findStatement.setString(1, (String) key);
            }

            resultSet = findStatement.executeQuery();
            toReturn = retrieveObject(resultSet); // retrieve object

        } catch (SQLException e) {
            toReturn = null;
        } finally {
            ConnectionFactory.close(resultSet);
            ConnectionFactory.close(findStatement);
            ConnectionFactory.close(dbConnection);
        }
        return toReturn;
    }

    /**
     * Inserts a new row in the database based on the type of object passed as
     * parameter.
     * @param toInsert
     * @return the ID of the newly inserted object (generated by the database)
     */
    public int insert(Object toInsert) {
        Connection dbConnection = ConnectionFactory.getConnection();
        int insertedID = -1; //return value
        PreparedStatement insertStatement = null;

        try{
            insertStatement = dbConnection.prepareStatement(insertQuery(), Statement.RETURN_GENERATED_KEYS);

            Field[] fields = type.getDeclaredFields();
            int paramIndex = 1;
            for(Field field : fields) {
                if(!field.getName().equals("ID")) {
                    PropertyDescriptor propertyDescriptor = new PropertyDescriptor(field.getName(), type);
                    Method getter = propertyDescriptor.getReadMethod();
                    insertStatement.setObject(paramIndex, getter.invoke(toInsert));
                    paramIndex++;
                }
            }

            insertStatement.executeUpdate();

            ResultSet rs = insertStatement.getGeneratedKeys();
            if (rs.next()) {
                insertedID = rs.getInt(1);
            }
        } catch (Exception e) {
            return -3;
        } finally {
            ConnectionFactory.close(insertStatement);
            ConnectionFactory.close(dbConnection);
        }

        return insertedID;
    }

    //Private methods ---

    private T retrieveObject(ResultSet resultSet) {
        T toReturn = null;
        Constructor[] constructors = type.getDeclaredConstructors();
        Constructor defaultConstructor = null;

        for(int i = 0; i < constructors.length; i++) {
            defaultConstructor = constructors[i];
            if(defaultConstructor.getGenericParameterTypes().length == 0) {
                break;
            }
        }

        try {
            resultSet.next();
            defaultConstructor.setAccessible(true);
            toReturn = (T) defaultConstructor.newInstance();
            for(Field field : type.getDeclaredFields()) {
                String fieldName = field.getName();
                Object value = resultSet.getObject(fieldName);
                PropertyDescriptor propertyDescriptor = new PropertyDescriptor(fieldName, type);
                Method setter = propertyDescriptor.getWriteMethod();
                setter.invoke(toReturn, value);
            }

            } catch (Exception e) {
                return null;
        }
        return toReturn;
    }

    private int nrOfEntries() {
        int toReturn = 0;
        Connection dbConnection = ConnectionFactory.getConnection();
        PreparedStatement countStatement = null;
        ResultSet rs = null;
        try {
            countStatement = dbConnection.prepareStatement(numberOfEntriesQuery());
            rs = countStatement.executeQuery();
            rs.next();
            toReturn = rs.getInt("COUNT(*)");
        } catch (SQLException e) {
            toReturn = -1;
        } finally {
            ConnectionFactory.close(rs);
            ConnectionFactory.close(countStatement);
            ConnectionFactory.close(dbConnection);
        }
        return toReturn;
    }

    //Queries ---

    private String findQuery (String keyColumn) {
        String toReturn = "SELECT * FROM " + type.getSimpleName() + " WHERE " + keyColumn + "=?";
        return toReturn;
    }

    private String numberOfEntriesQuery() {
        String toReturn = "SELECT COUNT(*) FROM " + type.getSimpleName() + ";";
        return toReturn;
    }

    private String insertQuery() {
        String toReturn = "INSERT INTO " + type.getSimpleName() + "(";
        Field[] fields = type.getDeclaredFields();
        String valuesString = "VALUES (";
        for(Field field : fields) {
            if(!field.getName().equals("ID")) {
                toReturn += field.getName();
                valuesString += "?";
            }
            else {
                continue;
            }
            if(field != fields[fields.length - 1]) {
                toReturn += ",";
                valuesString += ",";
            }
            else {
                toReturn += ") ";
                valuesString += ");";
            }
        }
        toReturn += valuesString;
        return toReturn;
    }



    //TODO: edit
    //TODO: delete
    //TODO: createAndPopulateFromList
    //TODO: getContent
}
